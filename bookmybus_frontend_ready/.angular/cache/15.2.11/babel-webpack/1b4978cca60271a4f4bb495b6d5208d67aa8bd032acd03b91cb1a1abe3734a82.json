{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.api = `${environment.apiUrl}/users`;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n    }\n    get currentUser() {\n      return this.currentUserSubject.value;\n    }\n    isLoggedIn() {\n      return !!this.currentUser;\n    }\n    isAdmin() {\n      return this.currentUser && this.currentUser.role === 'ADMIN';\n    }\n    /*\r\n      login(username: string, password: string): Observable<boolean> {\r\n        return this.http.post(`${this.api}/login`, { username, password }, { responseType: 'text' })\r\n          .pipe(\r\n            map(_ => {\r\n              const user = { username, role: username === 'admin' ? 'ADMIN' : 'USER' };\r\n              localStorage.setItem('currentUser', JSON.stringify(user));\r\n              this.currentUserSubject.next(user);\r\n              return true;\r\n            }),\r\n            catchError(() => of(false))\r\n          );\r\n      }\r\n    */\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/']);\n    }\n    register(username, email, password) {\n      return this.http.post(`${this.api}/register`, {\n        username,\n        email,\n        password\n      });\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}