{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ToastService = /*#__PURE__*/(() => {\n  class ToastService {\n    constructor() {\n      this.toastsSubject = new BehaviorSubject([]);\n      this.nextId = 0;\n    }\n    get toasts$() {\n      return this.toastsSubject.asObservable();\n    }\n    get toasts() {\n      return this.toastsSubject.value;\n    }\n    showSuccess(title, message, duration = 5000) {\n      this.showToast('success', title, message, duration);\n    }\n    showError(title, message, duration = 7000) {\n      this.showToast('error', title, message, duration);\n    }\n    showWarning(title, message, duration = 6000) {\n      this.showToast('warning', title, message, duration);\n    }\n    showInfo(title, message, duration = 5000) {\n      this.showToast('info', title, message, duration);\n    }\n    showToast(type, title, message, duration) {\n      const toast = {\n        id: `toast-${this.nextId++}`,\n        type,\n        title,\n        message,\n        duration\n      };\n      this.toastsSubject.next([...this.toasts, toast]);\n      // Auto remove toast after duration\n      if (duration > 0) {\n        setTimeout(() => {\n          this.removeToast(toast.id);\n        }, duration);\n      }\n    }\n    removeToast(id) {\n      const updatedToasts = this.toasts.filter(toast => toast.id !== id);\n      this.toastsSubject.next(updatedToasts);\n    }\n    clearAll() {\n      this.toastsSubject.next([]);\n    }\n  }\n  ToastService.ɵfac = function ToastService_Factory(t) {\n    return new (t || ToastService)();\n  };\n  ToastService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ToastService,\n    factory: ToastService.ɵfac,\n    providedIn: 'root'\n  });\n  return ToastService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}